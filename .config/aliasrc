#!/bin/bash

WIFI_ADAPTOR="wlp58s0"

# config
alias config='git --git-dir "$HOME/.config/dotfiles.git" --work-tree "$HOME"'

# clear
alias c='clear'
alias cc='clear'
alias cear='clear'
alias cler='clear'
alias clea='clear'
alias clar='clear'
alias clewar='clear'
alias lear='clear'
alias celra='clear'
alias clera='clear'
alias claer='clear'
alias celar='clear'
alias clare='clear'

# enhance tools
[ -x "$(command -v bat)" ] && alias cat="bat"
[ -x "$(command -v curlie)" ] && alias curl="curlie"
[ -x "$(command -v nvim)" ] && alias vim="nvim"

# utility
alias swclicks='xmodmap -e "pointer = 3 2 1"'
alias tv="xrandr --output HDMI1 --mode 1920x1080 --right-of eDP1"
alias mm="xrandr --output HDMI1 --mode 1920x1080 --left-of eDP1"

# npx commands
alias oao='npx oao'
alias np='npx np'
alias nx='npx nx'
alias cra='npx create-react-app'
s() {
  [ -f ./.skill/env ] && . ./.skill/env
}

# enhance commands
alias :q='exit'
alias cp="cp -i"
alias df='df -h'
alias dff="df | grep -E '/dev/nvme0n1p[12]'"
alias grep='grep --color'
alias ls='ls --color'
alias mkdir='mkdir -pv'

# super user commands
alias usermod='sudo usermod'
alias chmod='sudo chmod'
alias chown='sudo chown'
alias dhcpcd='sudo dhcpcd'
alias pacman-mirrors='sudo pacman-mirrors'
alias systemctl='sudo systemctl'
alias pacman='lazy-pacman'
alias cpssh='cat ~/.ssh/id_ed25519.pub | xsel -i --clipboard'
alias x="sudo chmod +x"
alias unlock-pacman="sudo rm /var/lib/pacman/db.lck"
alias orphan='pacman -Rs $(pacman -Qqtd)'

# path shorcuts
alias ~='cd ~'
alias ..='cd ..'
alias dt='cd ~/desktop'
alias bookmarkrc="vim $HOME/.config/bookmarkrc"

# sysadmin
alias findstr='grep -rnw'
alias afind='ack -il'
alias path='echo -e ${PATH//:/\\n} | sort'
alias history=omz_history
alias cpwd='pwd | xsel -i --clipboard'
alias clocksync='sudo ntpdate 1.ro.pool.ntp.org'

font() {
  fc-list -v | grep -e "family:.*$1" | sort | uniq
}

which-font() {
  FC_DEBUG=4 pango-view -q -t $1 2>&1 | grep -o 'family: "[^"]\+' | cut -c 10- | tail -n 1
}

# process
alias find-gpu='ps aux | grep gpu-process | grep'
alias fuck='killall -9'

killit() {
  ps aux | grep -v "grep" | grep "$@" | awk '{print $2}' | xargs sudo kill
}

process() {
  if [[ $(pidof $1) ]]; then
    # show process memory usage
    echo
    ps aux | grep $1 | grep -v grep | awk 'BEGIN { sum=0 } {sum=sum+$6; } END {printf("[Totall memory used by process] : %s Mb\n",sum / 1024)}'
    # show memory usage
    echo
    free -m | awk 'NR==2{printf "[System memory status] : %s/%s Mb (%.2f%%)\n", $3,$2,$3*100/$2 }'

    # show process pid childs
    local counter=0
    for pid in $(pidof $1); do
      ((counter++))
    done
    echo -e "\n[Child process count] : $counter\n"
  else
    echo "Process doesn't exist!"
  fi

}

# wireguard
alias down='nmcli c down'
alias up='nmcli c up'

# config files
alias hosts='sudoedit /etc/hosts'
alias dnsrc='sudoedit /etc/resolv.conf'
alias profilerc='vim ~/.profile'
alias bashrc='vim ~/.bashrc'
alias sshrc='vim ~/.ssh/config'
alias gitrc='vim $XDG_CONFIG_HOME/git/config'
alias zalias='vim $XDG_CONFIG_HOME/aliasrc'
alias envrc='vim $XDG_CONFIG_HOME/env'
alias mocrc='vim $XDG_CONFIG_HOME/moc/config'
alias zshrc='vim $XDG_CONFIG_HOME/zsh/.zshrc'
alias npmrc='vim $XDG_CONFIG_HOME/npm/npmrc'
alias vimrc='vim $XDG_CONFIG_HOME/nvim/init.vim'
alias vimplug='vim $XDG_CONFIG_HOME/nvim/plugins.vim'
alias tmuxrc='vim $XDG_CONFIG_HOME/tmux/tmux.conf'
alias i3rc='vim $XDG_CONFIG_HOME/i3/config'
alias projectrc='vim $XDG_CONFIG_HOME/shortcuts'
alias reload='source $XDG_CONFIG_HOME/aliasrc'
alias fontrc='vim $XDG_CONFIG_HOME/fontconfig/'
alias xreload='xrdb $XDG_CONFIG_HOME/X11/Xresources'

# file system
alias l='colorls --tree=0 -a --sd'
alias lsa='ls -AF --group-directories-first'
alias lless='l | less'
alias laless='ll | less'
alias rd=rmdir
alias open='xdg-open'

mk() {
  mkdir "$1" && cd "$1"
}

tmp() {
  local TD="$(mktemp --directory)"
  cd $TD
}

# network
alias getip="curl -s -S https://icanhazip.com"
alias mac="getMac $WIFI_ADAPTOR"
alias ping='ping -i 1 -O'
alias scanip='nmap -sn 192.168.1.0/24'

port() {
  sudo netstat -tulpn | grep :"$1"
}

getMac() {
  ip link show "$@" | grep link | awk '{ print $2 }'
}

localip() {
  ip addr show $WIFI_ADAPTOR | grep 'inet ' | awk '{ print $2 }'
}

netinfo() {
  printf "Local IP:\t%s\nMac Addr:\t%s\nGlobal IP:\t%s\n" "$(localip)" "$(mac)" "$(getip)"
}

shecan() {
  printf "nameserver 178.22.122.100\nnameserver 185.51.200.2\n" | sudo tee /etc/resolv.conf
}

setd() {
  printf "nameserver 1.1.1.1\nnameserver 4.2.2.4\n" | sudo tee /etc/resolv.conf
}

for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
  alias "$method"="curl -X '$method' -H 'content-type: application/json'"
done

# Other packages
alias pac='pacman -S'
alias pacr='pacman -R'
alias pacls='pacman -Qi'

# npm
alias loadnvm=". $NVM_DIR/nvm.sh"
alias npmls='npm ls --depth 0'
alias npmr='npm remove'
alias npmi='npm install'
alias npmg='npm install -g'
alias npms='npm start'
alias npmt='npm test'
alias npmd='npm install -D'
alias npmo='npm outdated'
alias npmp='npm publish'
alias npmv='npm -v'
nvers() {
  npm show $1 versions
}
alias ncu='npm-check -u'
alias nrc='npm run commit'
alias cleannm='find . -name "node_modules" -type d -exec sudo rm -rf {} \;'
alias renpm='rm -rf node_modules && npm i'
alias monore='find . -name "node_modules" -type d -exec sudo rm -rf {} \; ; npx lerna bootstrap && npm install'

# yarn
alias y='yarn'
alias yrs='yarn start'
alias yrd='yarn run dev'
alias ya='yarn add'
alias yad='yarn add --dev'
alias yrc='yarn run commit'
alias yrt='yarn run test'
alias yrtw='yarn run test:watch'
alias yrb='yarn run build'
alias yr='yarn remove'
alias ycc='yarn cache clean'
alias yui='yarn upgrade-interactive --latest'
alias yws='yarn workspace'
alias ysu='curl --compressed -o- -L https://yarnpkg.com/install.sh | bash'

## docker-compose
alias dc='docker-compose'
alias dcd='docker-compose -f ./docker-compose.dev.yml'
alias drmi='sudo docker rmi $(sudo docker images -a --filter=dangling=true -q)'
alias drm='sudo docker rm $(sudo docker ps --filter=status=exited --filter=status=created -q)'
alias dps='docker ps -a'
alias dim='docker images | tail -n +2 | sort'
alias trash='git add . && git commit -m 'debug' --no-verify && git push'
alias trash!='git add . && git commit --amend --no-edit --no-verify && git push -f --force-with-lease'

## docker
dip() {
  docker container inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $1 | tr -d '\n' | xsel -i -b
}
alias d='ALL_PROXY=socks5://localhost:6000 docker'

## git
alias clone='git clone'
alias gs='git status -s'
# alias gss='git status'

# alias ga='git add'
alias gaa='git add . && git status -s'

alias gb='git branch -v'
alias gbr='git branch --remote'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbD='git branch -D'

alias gc='git commit -v'
alias 'gca'='git commit --amend'
alias 'gc!'='git commit -v --amend --no-edit'
alias gcam='git commit -a -m'
alias gcm='git commit -m'

alias gswc='git switch -c'
alias gco='git checkout'
alias gsw='git switch'

alias pull='git pull'
alias push='git push'
alias 'push!'='git push origin $(git_current_branch) --force --no-force-with-lease'
alias pushu='git push --set-upstream origin $(git_current_branch)'

alias gcount='git shortlog -sn'
alias gl='git log --oneline --decorate'
alias glog='git log --oneline --color --decorate --graph --all | emojify | less -r'
alias gloga="git log --graph --color --pretty=format:'%C(yellow)%h%Creset %C(bold blue)%an%C(reset) - %s - %Creset %C(yellow)%d%Creset %C(green)(%cr)%Creset' --abbrev-commit --date=relative --all | emojify | less -r"
alias gls='git log --stat'
alias glsg='git log --graph --decorate --all'

alias gm='git merge'
alias gma='git merge --abort'
alias gmt='git mergetool --no-prompt'
alias gmtvim='git mergetool --no-prompt --tool=vimdiff'

alias gr='git reset'
alias gra='git reset .'
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'

alias grmv='git remote rename'
alias grrm='git remote remove'
alias grset='git remote set-url'
alias grup='git remote update'
alias grv='git remote -v'
alias gro='git remote add origin'
alias groot='git commit -m "root" --allow-empty'

# alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbs='git rebase --skip'
alias grbi='git rebase -i'

alias gt='git tag'
alias gtv='git tag | sort -V'
alias count-line='git total --numstat -- . ":(exclude)yarn.lock"'

lazy-pacman() {
  case $1 in
  -S | -D | -S[^sih]* | -R* | -U*)
    /usr/bin/sudo /usr/bin/pacman "$@"
    ;;
  *) /usr/bin/pacman "$@" ;;
  esac
}

# ex - archive extractor
ex() {
  if [ -f "$1" ]; then
    case "$1" in
    *.tar.bz2) tar xjf "$1" ;;
    *.tar.xz) tar xf "$1" ;;
    *.tar.gz) tar xzf "$1" ;;
    *.bz2) bunzip2 "$1" ;;
    *.rar) unrar x "$1" ;;
    *.gz) gunzip "$1" ;;
    *.tar) tar xf "$1" ;;
    *.tbz2) tar xjf "$1" ;;
    *.tgz) tar xzf "$1" ;;
    *.zip) unzip "$1" ;;
    *.Z) uncompress "$1" ;;
    *.7z) 7z x "$1" ;;
    *) echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

batt() {
  BAT=${1:-BAT0}
  capacity=$(head /sys/class/power_supply/$BAT/charge_full)
  design=$(head /sys/class/power_supply/$BAT/charge_full_design)
  bc <<<"scale=2; $capacity / $design"
}

open_d() {
	open "$1" </dev/null &>/dev/null &
}

compress() {
  ffmpeg -i "$1" -codec:v libx264 -preset medium -crf 23 "$1.mp4"
}

