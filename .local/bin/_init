#!/usr/bin/env bash

function mkinit() {
  [[ -n $1 ]] && mkdir "$1" && cd "$1"

  if [[ $(pwd) == "$HOME" ]]; then
    echo >&2 "You should not run this script on your HOME directory"
    exit 1
  fi
}

function gen_ignore() {
  touch .gitignore
  tee .gitignore <<EOF >/dev/null
# OS
.DS_Store
Thumbs.db

# IDEs and editors
/.project
/.idea
/.vscode

# environment
.env.local

# npm
.npm
npm-debug.log*
node_modules/
*.tgz

# yarn
.yarn-integrity
yarn.lock
yarn-debug.log*
yarn-error.log*
EOF
}

function init_git() {
  echo "Initializing a git repo..."
  gen_ignore
  git init >/dev/null
}

function init_npm() {
  echo "Generating npmrc..."

  touch .npmrc
  tee .npmrc <<EOF >/dev/null
save-exact=true
auto-install-peers=true
update-notifier=false
EOF

  echo "Initializing package manager..."
  pnpm init >/dev/null

  pnpm pkg delete scripts.test
}

function init_eslint() {
  echo "Generating eslint config..."
  touch eslint.config.mjs
  tee eslint.config.mjs <<EOF >/dev/null
import { init } from '@fullstacksjs/eslint-config';

export default init();
EOF
}

function init_prettier() {
  echo "Generating prettier config..."

  touch .prettierrc
  tee .prettierrc <<EOF >/dev/null
{
  "arrowParens": "always",
  "bracketSpacing": true,
  "endOfLine": "lf",
  "htmlWhitespaceSensitivity": "css",
  "insertPragma": false,
  "bracketSameLine": false,
  "jsxSingleQuote": false,
  "printWidth": 80,
  "proseWrap": "always",
  "quoteProps": "as-needed",
  "requirePragma": false,
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "all",
  "useTabs": false
}
EOF

  tee .prettierignore <<EOF >/dev/null
**/node_modules
**/dist
EOF
}

function init_editorconfig() {

  echo "Generating editorconfig..."
  touch .editorconfig
  tee .editorconfig <<EOL >/dev/null
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 2
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
max_line_length = off
trim_trailing_whitespace = false
EOL
}

function init_cspell() {
  echo "Generating cspell config..."

  touch .cspell.json
  tee .cspell.json <<EOF >/dev/null
{
  "\$schema": "https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json",
  "version": "0.2",
  "language": "en",
  "ignorePaths": ["node_modules/", "pnpm-lock.yaml", "dist/"]
}
EOF

  tee .cspell.json <<EOF >/dev/null
{
  "\$schema": "https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json",
  "version": "0.2",
  "language": "en",
  "dictionaryDefinitions": [
    {
      "name": "workspace",
      "path": "./.configs/cspell/workspace.txt",
      "addWords": true
    },
    {
      "name": "npm",
      "path": "./.configs/cspell/npm.txt",
      "addWords": true
    }
  ],
  "dictionaries": ["workspace", "npm"]j,
  "ignorePaths": ["node_modules/", "pnpm-lock.yaml", "dist/"]
}
EOF
}

function init_lintstaged() {
  echo "Generating lint-staged config..."

  touch .lintstagedrc.json
  tee .lintstagedrc.json <<EOF >/dev/null
{
  "*.{json,html}": ["prettier --write", "cspell --no-must-find-files"],
  "*.{md,yaml,yml}": ["cspell --no-must-find-files"],
  "*.ts(x)?": ["eslint --fix"]
}
EOF
}

function commit_root() {
  git commit -m 'root' --allow-empty

  git add .
  git commit -m 'chore: initial commit'
}

function init_husky() {
  echo "Husky > Init"
  mkdir scripts
  mkdir .configs

  echo " - Husky > Generate husky config..."
  pnpm husky .configs/husky

  echo " - Husky > Generating prepare script..."
  pnpm pkg set scripts.prepare="./scripts/prepare"
  tee scripts/prepare <<EOF >/dev/null
#!/usr/bin/env sh

[ -d .git/ ] && pnpm husky configs/husky
EOF

  echo " - Husky > Generating husky scripts..."
  tee .configs/husky/commit-msg <<EOF >/dev/null
#!/usr/bin/env sh

omit_comments() {
  sed -r "s/#(.*)//g"
}

cat "\$1" | omit_comments | npx --no-install cspell stdin

EOF

  tee .configs/husky/pre-commit <<EOF >/dev/null
#!/usr/bin/env sh

pnpm exec lint-staged
EOF
}

function open_code() {
  code "$(pwd)"
}

function npi() {
  pnpm install --save-dev --silent --prefer-offline "$@"
}
